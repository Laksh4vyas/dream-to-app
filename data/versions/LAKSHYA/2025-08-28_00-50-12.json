{
  "idea": "An AI Resume Analyzer that gives job suggestions.",
  "files": {
    "app.py": "import streamlit as st\nimport pandas as pd\nfrom utils.helpers import analyze_resume, get_job_suggestions\n\nst.title(\"AI Resume Analyzer & Job Suggester\")\n\nuploaded_file = st.file_uploader(\"Choose a resume file\", type=[\"txt\", \"pdf\", \"docx\"])\n\nif uploaded_file is not None:\n    try:\n        resume_text = uploaded_file.read().decode(\"utf-8\")  # Handle different encodings\n        analysis_results = analyze_resume(resume_text)\n\n        st.subheader(\"Resume Analysis\")\n        col1, col2, col3 = st.columns(3)\n        col1.metric(\"Keywords Found\", analysis_results[\"keyword_count\"])\n        col2.metric(\"Skills Identified\", len(analysis_results[\"skills\"]))\n        col3.metric(\"Experience Years\", analysis_results[\"experience\"])\n\n        st.subheader(\"Skills Breakdown\")\n        skill_counts = pd.DataFrame(\n            {\n                \"Skill\": analysis_results[\"skills\"],\n                \"Count\": [1] * len(analysis_results[\"skills\"]),\n            }\n        )\n        skill_counts = skill_counts.groupby(\"Skill\").size().reset_index(name=\"Count\")\n        st.bar_chart(skill_counts.set_index(\"Skill\"))\n\n        st.subheader(\"Job Suggestions\")\n        suggested_jobs = get_job_suggestions(\n            analysis_results[\"skills\"], analysis_results[\"experience\"]\n        )\n        if suggested_jobs:\n            st.table(suggested_jobs)\n        else:\n            st.write(\"No job suggestions found based on your resume.\")\n\n    except Exception as e:\n        st.error(f\"An error occurred: {e}\")\nelse:\n    st.info(\"Please upload a resume file.\")\n",
    "utils/helpers.py": "import re\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nimport nltk\n\nnltk.download(\"punkt\")\nnltk.download(\"stopwords\")\nnltk.download(\"averaged_perceptron_tagger\")\n\n# Sample job data (replace with your actual job data)\njob_data = {\n    \"Software Engineer\": [\n        \"python\",\n        \"java\",\n        \"programming\",\n        \"software\",\n        \"development\",\n        3,\n    ],\n    \"Data Scientist\": [\"python\", \"pandas\", \"machine learning\", \"data analysis\", 2],\n    \"Data Analyst\": [\"sql\", \"excel\", \"data analysis\", \"tableau\", 1],\n    \"Project Manager\": [\"project management\", \"agile\", \"communication\", 5],\n}\n\n\ndef analyze_resume(resume_text):\n    # Basic keyword extraction\n    keywords = [\n        \"python\",\n        \"java\",\n        \"machine learning\",\n        \"data analysis\",\n        \"sql\",\n        \"project management\",\n        \"communication\",\n        \"agile\",\n        \"software\",\n        \"development\",\n        \"tableau\",\n        \"excel\",\n        \"pandas\",\n    ]\n    keyword_count = sum(\n        1\n        for keyword in keywords\n        if re.search(r\"\\b\" + keyword + r\"\\b\", resume_text, re.IGNORECASE)\n    )\n\n    # Basic skill extraction (replace with more robust NLP techniques)\n    tokens = word_tokenize(resume_text)\n    stop_words = set(stopwords.words(\"english\"))\n    filtered_tokens = [\n        w.lower() for w in tokens if not w.lower() in stop_words and w.isalnum()\n    ]\n    skills = [\n        word for word, pos in nltk.pos_tag(filtered_tokens) if pos.startswith(\"NN\")\n    ]  # Extract nouns as skills\n\n    # Basic experience extraction (replace with more robust NLP techniques)\n    experience_match = re.findall(\n        r\"(\\d+)\\s*(?:year|years)\\s*experience\", resume_text, re.IGNORECASE\n    )\n    experience = int(experience_match[0]) if experience_match else 0\n\n    return {\"keyword_count\": keyword_count, \"skills\": skills, \"experience\": experience}\n\n\ndef get_job_suggestions(skills, experience):\n    suggestions = []\n    for job, required_skills in job_data.items():\n        skill_match = sum(\n            1\n            for skill in skills\n            if skill.lower() in [s.lower() for s in required_skills[:-1]]\n        )\n        if (\n            skill_match >= len(required_skills[:-1]) / 2\n            and experience >= required_skills[-1]\n        ):\n            suggestions.append({\"Job Title\": job})\n    return pd.DataFrame(suggestions) if suggestions else None\n",
    "assets/__init__.py": "# This file can be left empty for now.  It's a placeholder for any assets you might add later.\n"
  },
  "timestamp": "2025-08-28_00-50-12"
}