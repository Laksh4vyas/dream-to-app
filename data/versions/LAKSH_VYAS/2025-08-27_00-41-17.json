{
  "idea": "snake game",
  "files": {
    "app.py": "import streamlit as st\nfrom utils.helpers import play_snake, reset_game\n\nst.title(\"Snake Game\")\n\ngame_state = st.session_state\n\nif \"game_over\" not in game_state:\n    game_state[\"game_over\"] = False\n\nif \"snake\" not in game_state:\n    game_state[\"snake\"] = [(0, 0)]\n\nif \"food\" not in game_state:\n    game_state[\"food\"] = (0, 0)\n\nif \"direction\" not in game_state:\n    game_state[\"direction\"] = (1, 0)\n\nif \"score\" not in game_state:\n    game_state[\"score\"] = 0\n\nif \"game_board_size\" not in game_state:\n    game_state[\"game_board_size\"] = 20\n\nif not game_state[\"game_over\"]:\n    game_board_size = game_state[\"game_board_size\"]\n    col1, col2 = st.columns([1, 2])\n    with col1:\n        game_board_size = st.number_input(\n            \"Board Size:\",\n            min_value=10,\n            max_value=50,\n            value=game_state[\"game_board_size\"],\n            step=1,\n        )\n        if game_board_size != game_state[\"game_board_size\"]:\n            reset_game(game_state, game_board_size)\n\n    with col2:\n        st.write(f\"Score: {game_state['score']}\")\n        play_snake(game_state, game_board_size)\n\n    if game_state[\"game_over\"]:\n        st.write(\"Game Over!\")\n        if st.button(\"Play Again\"):\n            reset_game(game_state, game_board_size)\n",
    "utils/helpers.py": "import random\nimport streamlit as st\n\n\ndef play_snake(game_state, game_board_size):\n    snake = game_state[\"snake\"]\n    food = game_state[\"food\"]\n    direction = game_state[\"direction\"]\n\n    head_x, head_y = snake[0]\n    new_head_x = head_x + direction[0]\n    new_head_y = head_y + direction[1]\n\n    if (new_head_x, new_head_y) == food:\n        snake.insert(0, (new_head_x, new_head_y))\n        game_state[\"score\"] += 1\n        game_state[\"food\"] = generate_food(snake, game_board_size)\n    elif (\n        0 <= new_head_x < game_board_size\n        and 0 <= new_head_y < game_board_size\n        and (new_head_x, new_head_y) not in snake\n    ):\n        snake.insert(0, (new_head_x, new_head_y))\n        snake.pop()\n    else:\n        game_state[\"game_over\"] = True\n        return\n\n    game_state[\"snake\"] = snake\n    draw_board(snake, food, game_board_size)\n\n    keys = st.experimental_get_query_params()\n    if \"up\" in keys and direction != (0, 1):\n        game_state[\"direction\"] = (0, -1)\n    elif \"down\" in keys and direction != (0, -1):\n        game_state[\"direction\"] = (0, 1)\n    elif \"left\" in keys and direction != (1, 0):\n        game_state[\"direction\"] = (-1, 0)\n    elif \"right\" in keys and direction != (-1, 0):\n        game_state[\"direction\"] = (1, 0)\n\n\ndef generate_food(snake, game_board_size):\n    while True:\n        food = (\n            random.randint(0, game_board_size - 1),\n            random.randint(0, game_board_size - 1),\n        )\n        if food not in snake:\n            return food\n\n\ndef draw_board(snake, food, game_board_size):\n    board = [[\".\" for _ in range(game_board_size)] for _ in range(game_board_size)]\n    for x, y in snake:\n        board[y][x] = \"#\"\n    board[food[1]][food[0]] = \"*\"\n    st.text(\"\\n\".join([\"\".join(row) for row in board]))\n\n\ndef reset_game(game_state, game_board_size):\n    game_state[\"game_over\"] = False\n    game_state[\"snake\"] = [(game_board_size // 2, game_board_size // 2)]\n    game_state[\"food\"] = generate_food(game_state[\"snake\"], game_board_size)\n    game_state[\"direction\"] = (1, 0)\n    game_state[\"score\"] = 0\n    game_state[\"game_board_size\"] = game_board_size\n",
    "assets/__init__.py": "# Empty file for potential future assets\n"
  },
  "timestamp": "2025-08-27_00-41-17"
}